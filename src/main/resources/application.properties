# random port microservice port
server.port=0

# list of cluster brokers (just one can be specified. others will be found automatically through specified broker)
spring.kafka.producer.bootstrap-servers=localhost:9092,localhost:9094

# key/value serialization classes
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# producer will get acknowledgement only after the leader has replicated the record to all in-sync replica
spring.kafka.producer.acks=all

# --------- not recommended way of retry setup (timeout is preferable) ---------
# number of times producer will retry sending a record before giving up
#spring.kafka.producer.retries=10
# time producer will wait before retrying to send a record after a failure
#spring.kafka.producer.properties.retry.backoff.ms=1000

# --------- retry setup (recommended) ---------
# total time producer will attempt to send a record, including all retries
spring.kafka.producer.properties.delivery.timeout.ms=20000

# time producer will wait before sending a batch of messages. 0 means send each record immediately, higher values
# allow batching multiple records together, which can improve throughput at the cost of slightly higher latency.
spring.kafka.producer.properties.linger.ms=0

# producer waits for a broker response for 5 second, then will perform retry (if broker replies with some error - retry will start immediately)
spring.kafka.producer.properties.request.timeout.ms=5000

# explicitly enable producer idempotence (earlier detection of configuration errors)
spring.kafka.producer.properties.enable.idempotence=true

# maximum number of unacknowledged requests the producer can send per connection (higher values improve throughput but can affect message ordering)
spring.kafka.producer.properties.max.in.flight.requests.per.connection=5
